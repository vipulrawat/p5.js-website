Home: "Inicio"
Download: "Descargar"
Start: "Empezar"
Reference: "Referencia"
Libraries: "Bibliotecas"
Learn: "Aprender"
Examples: "Ejemplos"
Books: "Libros"
Community: "Comunidad"
Contribute: "Contribuir"
Forum: "Foro"

footer1: "¡Hola! p5.js fue creado por "
footer2: " y es desarrollado por una comunidad de colaboradores, con apoyo de "
footer3: " y "
footer4: "Identidad y diseño gráfico por "

tagline1: "la diversión de Processing x la excentricidad de JavaScript"
tagline2: "la simplicidad de Processing x la flexibilidad de JavaScript"
tagline3: "la intuición de Processing x el poder de JavaScript"
tagline4: "la creatividad de Processing x el dinamismo de JavaScript"
tagline5: "la comunidad de Processing x la comunidad de JavaScript"
tagline6: "el poder de Processing x el alcance de JavaScript"

home:
  Download: "Descargar"
  Start: "Empezar"
  Reference: "Referencia"
  Libraries: "Bibliotecas"
  Learn: "Aprender"
  Contribute: "Contribuir"
  p1x1: "¡Hola! p5.js es una biblioteca de JavaScript creada con el objetivo original de "
  p1x2: " de hacer la programación accesible a artistas, diseñadores, educadores y principiantes, reinterpretándola para la web actual."
  p2x1: "Usando la metáfora original de bosquejar con software, p5.js posee un conjunto completo de funcionalidades para dibujar. Sin embargo, no estás limitado solo a dibujar en tu lienzo, puedes tomar la página completa de tu navegador como tu bosquejo. Para esto, p5.js posee"
  libraries: " bibliotecas"
  p2x2: " adicionales que hacen sencillo"
  interact: "interactuar"
  p2x3: " con otros objetos HTML5, incluyendo texto, entrada del usuario, video, cámara y sonido."
  p3x1: "p5.js es una nueva interpretación, no una emulación o un puerto, y está en activo desarrollo."
  p3x2: "¡Prueba p5.js en nuestro nuevo editor web!"
  sketch_by: "por"
  sketch_info: "CC Fest, 10 de noviembre @ NYU ITP"
  sketch_info_link: "http://ccfest.rocks/"

copyright:
  copyright1: "La biblioteca p5.js es software libre; puedes redistribuirla y/o modificarla según los términos de la "
  copyright2: " publicada por la Free Software Foundation, versión 2.1."
  copyright3: "La Referencia del lenguaje se encuentra bajo una licencia "
  copyright4: " que permite reusar este contenido para propósitos no-comerciales si se otorga el crédito correspondiente."

get started:
  get-started-title: "Empezar"
  get-started1: "Esta página te guía a través del proceso de configuración de un proyecto con p5.js y hacer tu primer bosquejo."
  get-started2: "Si quieres probar el nuevo "
  get-started3: "Editor Web de p5.js"
  get-started4: ", puedes ir a"
  get-started5: "Tu primer bosquejo"
  download-title: "Descarga y configuración de archivos"
  download1: "La manera más simple de empezar es usando el ejemplo en blanco incluido en"
  download2: "p5.js completo"
  download3: "disponible en el sitio."
  download4: "Si revisas el archivo index.html, te darás cuenta que tiene un enlace al archivo p5.js. Si estás buscando usar la versión reducida (comprimida para que las páginas carguen más rápidamente), cambia el enlace a p5.min.js."
  download5: "De forma alternativa, puedes enlazar a un archivo p5.js alojado en línea. Todas las versiones de p5.js están almacenadas en un CDN (Content Delivery Network). Puedes ver un historial de estas versiones aquí: "
  download6: ". En este caso, puedes cambiar el enlace a: "
  download7: "Una página HTML de ejemplo podría verse así:"
  download8: "También puedes empezar con esta plantilla de "
  download9: "."
  environment-title: "Ambiente"
  environment1: "Puedes usar el "
  environmentlink: "https://es.wikipedia.org/wiki/Editor_de_codigo_fuente"
  environment2: " editor de código "
  environment3: "que prefieras. Las instrucciones para usar y configurar  "
  environment4: " están incluidas a continuación, otras buenas opciones de editores incluyen "
  environment5: " y "
  environment6: "Si estás utilizando un lector de pantalla y no usas el editor web de p5, te recomendamos usar "
  environment7: " o "
  environment8: "Abre Sublime. Despliega el menú File (archivo) y elige Open... (abrir) y selecciona el directorio donde se encuentran tus archivos html y js. En la barra lateral izquierda, podrás ver ahora el nombre del directorio en la parte superior, y a continuación una lista con los archivos contenidos en el directorio."
  environment9: "Haz click en tu archivo sketch.js y éste se abrirá a la derecha de tu pantalla, donde podrás editarlo. "
  environment10: "el código de inicio de p5 en el editor sublime."
  environment11: "Abre el archivo index.html en tu navegador haciendo doble click en él o escribiendo:"
  environment12: "file:///la/ubicacion/de/tu/archivo/html"
  environment13: " en la barra de direcciones de tu navegador para ver tu bosquejo."
  your-first-sketch-title: "Tu primer bosquejo"
  your-first-sketch-intro1: "Los usuarios de Processing pueden revisar el "
  your-first-sketch-intro2: "https://github.com/processing/p5.js/wiki/Transici%C3%B3n-desde-Processing"
  your-first-sketch-intro3: "Tutorial de transición desde Processing"
  your-first-sketch-intro4: "En tu editor, escribe lo siguiente:"
  your-first-sketch2: "Esta línea de código significa \"dibuja una elipse, con su centro 50 pixeles a la derecha del borde izquierdo y 50 pixeles abajo del borde superior, con un ancho y un alto de 80 pixeles\"."
  your-first-sketch3: "Graba tu bosquejo y refresca la página en tu navegador. Si has escrito todo correctamente, verás esto:"
  your-first-sketch4: "Nota: Si estás utilizando un lector de pantalla debes activar los bosquejos accessibles en el editor p5 en línea, o fuera del editor web debes agregar la librería de accessibilidad en tu html. Para aprender a utilizar "
  your-first-sketch5: "p5 con un lector de pantalla haz click aquí"
  your-first-sketch6: " y para aprender más sobre la "
  your-first-sketch7: "librería de accesibilidad haz click aquí"
  your-first-sketch8: "la canvas tiene un círculo de alto y ancho 50 en la posición 80x y 80y"
  your-first-sketch9: "Si no lo escribiste correctamente, podría no aparecer nada. Si esto ocurre, asegúrate de haber copiado el código del ejemplo de manera correcta: los números deben estar contenidos dentro de paréntesis y tener comas entre cada uno de ellos, y la línea debe terminar con un punto y coma."
  your-first-sketch10: "Una de las cosas más difíciles de empezar a programar es que debes ser muy prolijo con el uso de la sintaxis. El navegador no es siempre lo suficientemente inteligente como para saber lo que quieres decir, y puede ser muy exigente con la puntuación. Te acostumbrarás a esto con un poco de práctica. Dependiendo del navegador que utilices, puedes ver los errores al revisar la \"consola\" de JavaScript. En Chrome, por ejemplo, esto está bajo Ver > Desarrollador > Consola JavaScript."
  your-first-sketch11: "A continuación, haremos un bosquejo más interesante. Borra el texto del ejemplo anterior y prueba este: "
  your-first-sketch12: "Este programa crea una ventana con un ancho de 640 pixeles y una altura de 480 pixeles, y luego empieza a dibujar círculos blancos según la posición del ratón. Cuando presionas un botón del ratón, el color del círculo cambia a negro. Explicaremos más adelante los detalles acerca de los elementos de este programa. Por ahora ejecuta el código, mueve el ratón, y haz click para probarlo."
  your-first-sketch13: "la canvas tiene múltiples circulos dibujados sobre ella al seguiendo el camino del movimiento del ratón"
  what-next-title: "¿Qué viene después?"
  processing-transition1: "Lee el "
  processing-transition2: "https://github.com/processing/p5.js/wiki/Transici%C3%B3n-desde-Processing"
  processing-transition3: "tutorial de transición desde Processing"
  processing-transition4: " para aprender cómo convertir de Processing a p5.js y sobre las mayores diferencias entre ellos."
  reference1: "Revisa la "
  reference2: " referencia"
  reference3: " para ver la documentación completa."
  learn1: "Revisa las páginas de "
  learn2: "aprender"
  learn3: " y "
  learn4: "ejemplos"
  learn5: " para aprender más."
  learn6: "Si deseas usar p5 con un lector de pantalla, revisa "
  learn7: "el tutorial p5 con lector de pantalla"
  book1: "Partes de este tutorial fueron adaptados del libro Getting Started with p5.js, por Lauren McCarthy, Casey Reas y Ben Fry, O'Reilly / Make 2015. Copyright "
  book2: 2015 Lauren McCarthy, Casey Reas y Ben Fry. Todos los derechos reservados.

download:
  Download: "Descargar"
  complete-library-title: "Biblioteca completa"
  p5.js-complete: "p5.js completo"
  includes-1: "Incluye:"
  includes-2: "p5.js, p5.dom.js, p5.sound.js y un proyecto de ejemplo"
  includes-3: "Versión "
  single-files-title: "Archivos por separado"
  single-file: "Archivo: "
  p5.js-uncompressed: " versión completa sin compresión"
  compressed: "versión comprimida"
  link: "Enlace: "
  statically-hosted-file: "archivo almacenado estáticamente"
  editor-title: "Editor"
  p5.js-editor: "Editor Web de p5.js"
  editor-includes: "Empieza a programar usando el Editor Web de p5.js, ¡no requiere instalación!"
  etc-title: "ETC"
  older-releases: "Versiones antiguas / bitácora de cambios "
  report-bugs: "Reporta errores "
  supported-browsers: "Navegadores soportados "
  support-title: "¡Apoya a p5.js!"
  support-1: "p5.js es un software gratuito y de código abierto. Queremos hacer nuestra comunidad lo más abierta e inclusiva posible. Puedes apoyar nuestro trabajo "
  support-2: "haciéndote miembro"
  support-3: " de la Processing Foundation como un individuo, un estudio, o una educación institucional. También puedes "
  support-4: "realizar una donación"
  support-5: " sin convertirte en miembro."
  support-6: "Individuo"
  support-7: "25 USD"
  support-8: "Estudio"
  support-9: "250 USD"
  support-10: "Institución educacional"
  support-11: "500 USD o 5 USD por estudiante"
  support-12: "Tu membresía apoya el desarrollo de software (de p5.js, Processing, Processing.py, Processing para Android y dispositivos ARM, material educativo como códigos de ejemplo y tutoriales, "
  support-13: "becarios"
  support-14: ", y "
  support-15: "eventos para la comunidad"
  support-16: ". ¡Necesitamos tu ayuda!"
  support-17: "Conferencia de contribuyentes de p5.js en el CMU STUDIO for Creative Inquiry en Pittsburgh (crédito de imagen: Taeyoon Choi)"
  support-18: "Saskia Freeke, becaria Processing, organiza talleres Code Liberation x Processing en Londres (crédito de imagen: Code Liberation Foundation)"
  support-19: "Conferencia Learning to Teach, Teaching to Learn en conjunto con SFPC (crédito de imagen: Kira Simon-Kennedy)"
  support-20: "Taller de Cassie Tarakajian, becaria de Processing Foundation, en Code Art Miami (crédito de imagen: Christian Arévalo Photography)"
  support-21: "Taeyoon Choi y un intérprete de señas en el taller Signing Coders de p5.js (crédito de imagen: Taeyoon Choi)"
  support-22: "Lanzamiento de Google Summer of Code (crédito de imagen: Taeyoon Choi)"
  support-23: "Cassie Tarakajian, becaria de Processing Foundation, realiza un taller en Code Art Miami (crédito de imagen: Christian Arévalo Photography)"
  support-24: "Luisa Pereira y Yeseul Song ayudan en la realización de un taller de p5.js basado en lenguaje de señas, enseñado por Taeyoon Choi (crédito de imagen: Taeyoon Choi)"
  support-25: "Conferencia de contribuyentes de p5.js en el CMU STUDIO for Creative Inquiry en Pittsburgh (crédito de imagen: Taeyoon Choi)"
  support-26: "Digital Citizens Lab, becarios Processing, participan eun panel sobre enseñanza STEM en el International Center of Photography (crédito de imagen: International Center of Photography)"
  support-27: "Participantes de un taller de p5.js in Santiago, Chile, dictado por Aarón Montoya-Moraga (crédito de imagen: Aarón Montoya-Moraga.)"
  support-28: "Claire Kearney-Volpe ayuda en la realización de un taller de p5.js basado en lenguaje de señas, enseñado por Taeyoon Choi (crédito de imagen: Taeyoon Choi)"
  support-29: "DIY Girls, becarios de la Processing Foundation, realizan un curso de programación creativa en Los Angeles (crédito de imagen: DIY Girls)"
  support-30: "Processing Fellow Digital Citizens Lab"
  support-31: "Junta bicostal de p5.js entre UCLA DMA y NYU ITP"
  support-32: "The Processing Foundation"
  support-33: " fue fundada en 2012 después de más de de una década de trabajo con el software original de Processing. La misión de la fundación es promover la alfabetización de software dentro de las artes visuales, y la alfabetización visual dentro de las disciplinas relacionadas a la tecnología - y hacer estas disciplinas accesibles a comunidades más diversas. Nuestra meta es empoderar a gente de diversos intereses para que aprenda a programar y que realice trabajo creativo con código, especialmente aquellos que de otra forma no hubieran tenido acceso a estas herramientas y recursos."

learn:
  learn-title: "Aprender"
  learn1: "Estos tutoriales proveen una revisión en mayor profundidad o paso a paso sobre temas particulares. Revisa la "
  learn2: "página de ejemplos"
  learn3: " para ver demostraciones cortas sobre diversos temas de p5.js."
  introduction-to-p5js-title: "Introducción a p5.js"
  hello-p5js-title: "Hola p5.js"
  hello-p5js: "Este corto video te introducirá a la biblioteca y lo que puedes hacer con ella."
  getting-started-title: "Empezar"
  getting-started: "¡Bienvenido a p5.js!<br>Esta introducción cubre lo básico de cómo configurar un proyecto con p5.js"
  p5js-overview-title: "Panorámica de p5.js"
  p5js-overview: "Una panorámica de las principales características de p5.js"
  p5js-processing-title: "p5.js y Processing"
  p5js-processing: "Las principales diferencias entre ambos, y cómo convertir de uno a otro."
  p5-screen-reader-title: "p5 con un lector de pantalla"
  p5-screen-reader: "Configurando p5 para que pueda ser usado fácilmente con un lector de pantalla."
  using-local-server-title: "Usando un servidor local"
  using-local-server: "Cómo configurar un servidor local en Mac OS X, Windows o Linux."
  connecting-p5js-title: "Conectando p5.js"
  creating-libraries-title: "Creando bibliotecas"
  creating-libraries: "Creando bibliotecas adicionales para p5.js."
  nodejs-and-socketio-title: "node.js y socket.io"
  nodejs-and-socketio: "Uso de un servidor node.js con p5.js y comunicación vía socket.io."
  programming-topics-title: "Tópicos de programación"
  beyond-the-canvas-title: "Más allá del lienzo"
  beyond-the-canvas: "Creación y manipulación de elementos en la página, más allá del lienzo."
  3d-webgl-title: "3D/WebGL"
  3d-webgl: "Desarrollo de aplicaciones con gráficas avanzadas en p5.js usando el modo WEBGL."
  color-title: "Color"
  color: "Una introducción al color digital."
  coordinate-system-and-shapes-title: "Coordinate System and Shapes"
  coordinate-system-and-shapes: "Drawing simple shapes and using the coordinate system."
  interactivity-title: "Interactivity"
  interactivity: "Introduction to interactivity with the mouse and keyboard."
  program-flow-title: "Program Flow"
  program-flow: "Introduction to controlling program flow in p5.js."
  color-title: "Color"
  color: Una introducción al color digital.
  curves-title: "Curvas"
  curves: "Una introducción a los tres tipos de curvas en p5.js: arcos, curvas spline y curvas Bézier."
  becoming-a-better-programmer-title: "Cómo programar mejor"
  debugging-title: "Depurar"
  debugging: "Guía de cómo depurar tu código para todo público."
  optimizing-title: "Optimizar código para mejor rendimiento"
  optimizing: "Un tutorial de consejos y trucos para optimizar tu código para que corra más rápida y fluidamente."
  test-driven-development-title: "Unit testing y desarrollo según pruebas"
  test-driven-development: "Sálvate de la agonía al instalar. ¿Qué es unit testing y cómo usarlo? Por Andy Timmons."
  contributing-to-the-community-title: "Contribuir a la comunidad"
  development-title: "Desarrollo"
  development: "Introducción y panorámica general sobre cómo contribuir al desarrollo."
  looking-inside-title: "Adentro de p5"
  looking-inside: "Una introducción a la estructura de archivos y herramientas para el desarrollo con p5.js, por Luisa Pereira."
  writing-tutorial-title: "Escribir un tutorial"
  writing-tutorial: "Una guía sobre cómo crear un tutorial de programación en p5.js."
  writing-a-tutorial-title: "Guía para contribuir con tutoriales de p5.js"
  writing-a-tutorial-author: "Este tutorial fue escrito por Tega Brain."
  writing-a-tutorial-1: "Invitamos a los educadores, colaboradores y entusiastas en general a contribuir con tutoriales de p5js. El proyecto de p5js hace que la programación creativa y el desarrollo de código abierto sean más accesibles para una comunidad diversa y estamos muy emocionados de publicar tutoriales sobre todos los aspectos del proceso de desarrollo. Nuestros materiales de aprendizaje hasta el momento incluyen guías sobre el aprendizaje de p5, la técnica de programación y cómo contribuir a un proyecto de código abierto."
  writing-a-tutorial-2: "Le damos la bienvenida a la contribución de nuevos tutoriales escritos y esta guía describe los pasos para proponer, preparar y contribuir con un tutorial."
  writing-a-tutorial-how-start-title: "Cómo empezar:"
  writing-a-tutorial-how-start-1: "Comprueba que el tema que hayas propuesto no haya sido cubierto antes. Puedes encontrar "
  writing-a-tutorial-how-start-2: "una lista aquí"
  writing-a-tutorial-how-start-3: "con los tutoriales que están en progreso. Si tu tema está marcado en esta lista como en progreso, tal vez puedes añadir al trabajo que se está llevando a cabo y cooperar preparando el trabajo ya existente para su publicación así que por favor contáctate con nosotros."
  writing-a-tutorial-how-start-4: "Si tu tema no está cubierto y no está enlistado como en progreso, por favor escribe unas líneas sobre lo que propones cubrir y mándanos un email con esta descripción a education@p5js.org."
  writing-a-tutorial-how-prepare-title: "Cómo preparar un tutorial de p5js para su publicación en línea:"
  writing-a-tutorial-how-prepare-1: "Cuando tu tutorial esté listo para ser publicado, por favor sigue los siguientes pasos para preparar tu contenido para el sitio de p5js."
  writing-a-tutorial-how-prepare-2: "Guarda el contenido de tu tutorial en un archivo tutorial-name.hbs con "
  writing-a-tutorial-how-prepare-3: "esta estructura básica."
  writing-a-tutorial-how-prepare-4: " Como se muestra en este archivo, tiene que contener un un encabezado como se muestra a continuación:"
  writing-a-tutorial-how-prepare-5: "La carpeta que contiene tu tutorial se colocará en la carpeta 'tutoriales' del sitio de p5js. El archivo llamado index.hbs es la "
  writing-a-tutorial-how-prepare-6: "página de destino de los tutoriales de p5js,"
  writing-a-tutorial-how-prepare-7: "y el archivo test-tutorial.hbs es el tutorial de prueba."
  writing-a-tutorial-how-prepare-8: "Todos los contenidos deben de ir en las:"
  writing-a-tutorial-how-prepare-9: "etiquetas de la página, con el fórmato definido por las etiquetas &lt;h1&gt; y &lt;h2&gt; y las etiquetas de párrafo &lt;p&gt; como se muestra en la "
  writing-a-tutorial-how-prepare-10: " página del tutorial de prueba."
  writing-a-tutorial-how-prepare-11: "Si tu tutorial contiene imágenes, deben colocarse en la carpeta 'assets' del sitio p5, en la ubicación src / assets / learn / test-tutorial / images, como se muestra a continuación."
  writing-a-tutorial-how-prepare-12: "Para formatear correctamente el código en el html de la página, utiliza la etiqueta:"
  writing-a-tutorial-embedding-title: "Incorporar bosquejos p5.js"
  writing-a-tutorial-embedding-1:  "Usar  p5js significa que puedes ilustrar tu tutorial con ejemplos de código animados, interactivos o editables para demostrar conceptos de programación. Tus ejemplos deben estar preparados como bosquejos p5.js y pueden ser incorporados en el tutorial de dos maneras."
  writing-a-tutorial-embedding-2: "Si el ejemplo es editable como en"
  writing-a-tutorial-embedding-3: " las páginas de referencia"
  writing-a-tutorial-embedding-4: "del sitio de p5js, el bosquejo p5js debe ser incorporado en la página html usando el widget p5js. Sigue"
  writing-a-tutorial-embedding-5: " esta guía "
  writing-a-tutorial-embedding-6: "sobre cómo incorporar bosquejos p5js usando el widget escrito por "
  writing-a-tutorial-embedding-7: ". También puedes ver esto en acción en la "
  writing-a-tutorial-embedding-8: " página del tutorial de prueba"
  writing-a-tutorial-embedding-9: "."
  writing-a-tutorial-embedding-10: "Si el ejemplo es animado y/o interactivo pero no editable, entonces el bosquejo p5js debe de ser incorporado en la página como un iframe como se describe a continuación."
  writing-a-tutorial-iframe-title: "Incorporar un bosquejo p5js usando un iframe"
  writing-a-tutorial-iframe-1: "Un iframe es cómo crear una ventana a través de la cual puedes ver otra página, aislada del resto de tú página. En este caso va a ser una ventana al archivo index.html que contiene tu bosquejo p5js. "
  writing-a-tutorial-iframe-2: "Coloca tus bosquejos p5 en la carpeta /src/assets/learn del sitio, en una carpeta etiquetada con el nombre de tu bosquejo como se muestra en la captura de pantalla. Aquí es donde todas las imágenes y bosquejos p5 enlazados por el iframe deben de estar guardados. "
  writing-a-tutorial-iframe-3: "En las subcarpetas que contienen tus ejemplos p5 debe de haber un archivo sketch.js y otro embed.html para tu bosquejo. "
  writing-a-tutorial-iframe-4: "Asegúrate que tu archivo embed.html tenga la ruta correcta hacia las librerías p5 del sitio. Si la estructura de tus archivos es igual a la de arriba, la ruta hacia las librerías p5 debe ser \"../../../js/p5.min.js\"."
  writing-a-tutorial-iframe-5: "Una vez comprobado esto, ya puedes incorporar los archivos 'index' de p5js como iframes en el archivo .hbs que contiene el contenido de tu tutorial. El código de inserción para el iframe sería entonces:"
  writing-a-tutorial-iframe-6: "Estilo para el iframe (esto podría directamente en la entrada o en una hoja de estilos):"
  writing-a-tutorial-iframe-7: "Aquí puedes ver el bosquejo puro en ejecución: "
  writing-a-tutorial-iframe-8: "Y aquí está incorporado en el sitio p5 usando el código a continuación: "
  writing-a-tutorial-iframe-9: "Una cosa a recalcar es que necesitas ajustar manualmente el tamaño del iframe para que funcione de la mejor manera posible si las cosas son de tamaño estándar."
  writing-a-tutorial-iframe-10: "También nota que los enlaces a los archivos de las librerías de p5.js no provienen de la página con extensión .eps con todo el contenido del tutorial. En su lugar, van a estar localizados en la página html que está procesando tu bosquejo (en este caso se llama embed.html)."
  writing-a-tutorial-iframe-11: "Más información sobre cómo incorporar bosquejos de p5.js se pueden encontrar "
  writing-a-tutorial-embed-iframe-12: "aquí."
  writing-a-tutorial-finishing-title: "Los últimos detalles"
  writing-a-tutorial-finishing-1: "Una vez que hayas terminado de escribir tu tutorial y tu contenido haya sido aprobado, copia (fork) desde GitHub el repositorio del sitio de p5.js, prepara tu contenido como lo hemos descrito anteriormente y finalmente crea una solicitud de (pull request) al repositorio del sitio de p5.js para que podamos agregar tu contenido y publicar tu contribución. ¡Felicidades!"
  writing-a-tutorial-finishing-2: "¡Muchas gracias!"

test-tutorial:

libraries:
  Libraries: "Bibliotecas"
  p5.dom: "p5.dom te permite interactuar con objetos HTML5 más allá del lienzo, incluyendo video, audio, cámara, entrada y texto."
  p5.sound: "p5.sound extiende p5 con funcionalidad de Web Audio, incluyendo entrada de audio, reproducción, análisis y síntesis."
  p5.accessibility: "p5.accessibility permite que el canvas de p5 sea más accesible a personas con discapacidad visual."
  Contributed: "Bibliotecas contribuidas"
  p5.serial1: "p5.serial permite la comunicación serial entre dispositivos que soportan serial (RS-232) y bosquejos p5 corriendo en el navegador. Creada por "
  p5.serial2: ", con contribuciones de "
  p5.serial3: " y "
  p5.collide2D: "p5.collide2D provee herramientas para calcular detección de colisiones en geometría 2D con p5.js. Creada por "
  rita.js: "RiTa.js provee un conjunto de objetos de procesamiento de lenguaje natural para literatura generativa. Creada por  "
  p5.geolocation: "p5.geolocation provee técnicas para adquirir, observar, calcular y georeferenciar ubicaciones de usuario para p5.js. Creada por "
  p5.speech: "p5.speech provee acceso simple y claro a las APIs de Habla Web y Detección de Habla, permitiendo la creación de bosquejos sencillos que pueden hablar y escuchar. Creada por "
  p5.bots: "Con p5.bots puedes interactuar con Arduino (u otro microprocesador) desde el navegador. Usa los datos de los sensores para controlar tu bosquejo, usa un bosquejo para controlar LEDs, motores, y más. Creada por "
  grafica.js: "grafica.js te permite añadir gráficas 2D simples pero altamente configurables a tus bosquejos de p5.js. Creada por "
  p5.play: "p5.play provee funciones de sprites, animaciones, entrada y colisión para juegos y aplicaciones afines. Creada por "
  p5.gui: "p5.gui genera una interfaz gráfica de usuario para tus bosquejos p5. Creada por "
  p5.gibber: "p5.gibber provee capacidades de secuenciamiento de música y de síntesis de audio. Creada por "
  p5.particle: "Los objetos Particle y Fountain pueden ser usados para crear efectos controlados por datos que son definidos a través de estructuras de usuario o entrada JSON y funciones de usuario para dibujar. Creada por "
  p5.scribble: "Dibujar primitivas 2D con una apariencia poco acabada. Creada por Janneck Wullschleger, basada en un puerto de la biblioteca original de Processing "
  p5.tiledmap1: "p5.tiledmap provee funciones de dibujo y ayuda para incluir mapas hechos con"
  p5.tiledmap2: "en tus bosquejos. Creada por "
  p5.dimensions1: "p5.dimensions extiende las funciones de vector de p5.js para que funcione con cualquier número de dimensiones. Creada por "
  p5.dimensions2: " y "
  p5.scenemanager: "p5.SceneManager te ayuda a crear bosquejos con múltiples estados / escenas. Cada escena es como un bosquejo dentro del bosquejo principal. Creada por "
  mappa: "Mappa es una biblioteca que provee un conjunto de herramientas para trabajar con mapas estáticos y geo-datos, además de otras herramientas útiles para desarrollar representaciones visuales de datos con geolocalización. Creada por "
  p5.func: "p5.func es una extensión de p5 que provee nuevos objetos y utilidades para generación de funciones en los dominios de tiempo, frecuencia y espacio. Creada por "
  p5.voronoi: "p5.voronoi brinda un conjunto de herramientas para dibujar y utilizar diagramas voronoi en tus bosquejos de p5.js."
  using-a-library-title: "Usando una biblioteca"
  using-a-library1: "Una biblioteca p5.js puede ser cualquier código p5.js que extiende o añade a las funcionalidades centrales de p5.js. Existen dos tipos de bibliotecas. Las bibliotecas centrales ("
  using-a-library2: " y "
  using-a-library3: ") son parte de la distribución de p5.js, mientras que las bibliotecas contribuidas son mantenidas y  desarrolladas por y de propiedad de los miembros de la comunidad de p5.js."
  using-a-library4: "Para incluir una biblioteca en tu bosquejo, enlázala en tu archivo HTML, después que hayas enlazado p5.js. Un archivo HTML como ejemplo podría lucir así:"
  create-your-own-title: "Crea tu propia biblioteca"
  create-your-own1: "p5.js acepta las bibliotecas contribuidas por la comunidad p5.js Revisa el"
  create-your-own2: "tutorial de bibliotecas"
  create-your-own3: "para revisar los detalles específicos de cómo crear una."

community:
  community-title: "Comunidad"
  community-statement-title: "Declaración de comunidad en torno a p5.js"
  community-statement1: "p5.js es una comunidad interesada en explorar la creación de arte y diseño con tecnología."
  community-statement2: "Somos una comunidad de, y en solidaridad con, gente de todas las identidades y expresiones de género, orientación sexual, raza, etnicidad, lenguaje, neurotipo, tamaño, habilidad, clase, religión, cultura, subcultura, opinión política, edad, nivel de habilidades, ocupación y bagaje. Reconocemos que no todos tienen el tiempo, medios económicos o la capacidad de participar activamente, pero sí reconocemos y promovemos el involucramiento de todo tipo. Facilitamos y fomentamos tanto acceso como empoderamiento. Todos somos estudiantes."
  community-statement3: "Nos gustan estos hashtags: #noCodeSnobs (porque valoramos la comunidad por sobre la eficiencia), #newKidLove (porque todos empezamos en alguna parte), #unassumeCore (porque no asumimos conocimiento previo) y #BlackLivesMatter (obviamente)."
  in-practice-title: "En la práctica:"
  in-practice1: " No somos programadores snob. No asumimos conocimiento previo ni damos por sentado que hay cosas que todos deberían saber. "
  in-practice2: "Insistimos en involucrarnos de manera activa en las peticiones de respuesn, sin importar su complejidad."
  in-practice3: "Le damos la bienvenida a los novatos y priorizamos la educación de otros. Apuntamos a aproximarnos a todas las tareas con el entusiasmo de un novato. Porque creemos que son tan importantes en este esfuerzo como los expertos."
  in-practice4: "Hacemos un esfuerzo constante en activamente reconocer y validar múltiples tipos de contribuciones."
  in-practice5: "Siempre estamos dispuestos a ofrecer ayuda y consejo."
  in-times-conflict-title: "En tiempos de conflicto:"
  in-times-conflict1: "Escuchamos"
  in-times-conflict2: "Comunicamos claramente y reconocemos los sentimientos del otro."
  in-times-conflict3: "Admitimos nuestros errores, pedimos disculpas, y aceptamos responsabilidad por nuestras acciones."
  in-times-conflict4: "Buscamos continuamente mejorar nosotros mismos y nuestra comunidad."
  in-times-conflict5: "Mantenemos nuestra comunidad respetuosa y abierta."
  in-times-conflict6: "Hacemos que todos se sientan escuchados."
  in-times-conflict7: "Somos conscientes y amables en nuestras interacciones."
  in-the-future-title: "En el futuro:"
  in-the-future1: "El futuro es ahora."
  contribute-title: "Contribuye"
  contribute1: "Nuestra comunidad está siempre buscando entusiastas para ayudar de diferentes maneras."
  develop-title: "Desarrolla."
  develop1: "GitHub"
  develop2: " es el principal lugar donde se almacena el código, se documentan los problemas y se discute sobre el código. Revisa el "
  develop3: " tutorial de desarrollo"
  develop4: " para introducirte al tema, o "
  develop5: "crea tu propia librería."
  document-title: "Documenta."
  document1: " Todos amamos la documentación. Se necesita ayuda "
  document2: "portando ejemplos"
  document3: ", "
  document4: " añadiendo documentación"
  document5: " y creando tutoriales."
  teach-title: "Enseña."
  teach1: " Teach a workshop, a class, a friend, a collaborator! Tag @p5xjs on Twitter and we will do our best to share what you're doing."
  create-title: "Crea."
  create1: " p5.js está buscando diseñadores, artistas y  programadores que contribuyan con una obra increíble y creativa para ser mostrada en la página principal y así inspirar al resto. Envía tu trabajo a "
  create2: "hello@p5js.org"
  create3: "."
  donate-title: "Dona."
  donate1: " p5.js es gratuito y de código abierto y hecho por artistas. Ayuda al desarrollo de p5.js a través de una donación a la "
  donate2: "Processing Foundation"
  donate3: "."
  contributors-conference-title: "Conferencia de colaboradores"
  contributors-conference1: "En 2015, p5.js organizó su primera "
  contributors-conference2: "conferencia de colaboradores"
  contributors-conference3: ". Artistas, diseñadores, programadores, educadores y más unieron fuerzas en el "
  contributors-conference4: "CMU's Studio for Creative Inquiry"
  contributors-conference5: " para mejorar p5.js."
  mailing-list-title: "Boletín"
  mailing-list-1: "Ingresa tu dirección de emial para recibir ocasionalmente novedades de la Processing Foundation."
  people-title: "People"
  people1: "blah"

books:
  books-title: "Libros"

examples:
  Examples: "Ejemplos"
  back-examples: "Volver a Ejemplos"
  Structure: "Estructura"
  Form: "Forma"
  Data: "Datos"
  Arrays: "Arreglos"
  Control: "Control"
  Image: "Imagen"
  Color: "Color"
  Math: "Matemática"
  Simulate: "Simulación"
  Interaction: "Interacción"
  Objects: "Objetos"
  Lights: "Luces"
  Motion: "Motion"
  Instance_Mode: "Modo Instancia"
  Dom: "DOM"
  Drawing: "Dibujo"
  Transform: "Transformar"
  Typography: "Tipografía"
  3D: "3D"
  Input: "Input"
  Sound: "Sonido"
  Advanced_Data: "Avanzado Datos"
  Mobile: "Móvil"
  Hello_P5: "Hola p5"

contributors-conference:
  contributors-conference-title: "Conferencia de contribuidores de p5.js"
  contributors-conference-date: "Mayo 25-31"
  contributors-conference1: "Un diverso grupo de aproximadamente 30 participantes se reunieron durante una semana en el "
  contributors-conference2: ", haciendo avances en el código, la documentación y las herramientas de extensión para la comunidad en torno al ambiente de programación p5.js. Los participantes vinieron de lugares tan distantes como Hong Kong, Seattle, Los Angeles, Boston y New York. La mayoría eran profesionales que trabajan en los campos de tecnología creativa, diseño de interacciónn, y artes mediales, pero el grupo también incluyó a una media docena de estudiantes de pregrado y posgrado de las escuelas de Arte y Arquitectura de Carnegie Mellon University."
  contributors-conference-participants-title: "Participantes"
  contributors-conference-diversity-title: "Diversidad"
  contributors-conference-diversity1: "Además de desarrollo técnico, otros de los principales enfoques de esta conferencia fueron extensión y diversidad. La conferencia comenzó con un panel"
  contributors-conference-diversity2: "Diversidad: Siete voces discuten sobre raza, género, habilidades &amp; clase en FLOSS e Internet"
  contributors-conference-diversity3: ". "
  contributors-conference-diversity4: "Organizado por"
  contributors-conference-diversity5: "y"
  contributors-conference-diversity6: ", "
  contributors-conference-diversity7: "el panel ocurrió el martes 25 de mayo 2015 en el Kresge Auditorium en Carnegie Mellon University. Los oradores incluyeron"
  contributors-conference-diversity8: "y"
  contributors-conference-diversity9: "."
  contributors-conference-support-title: "Apoyo"
  contributors-conference-support1: "Nuestra conferencia de contribuidores fue realizada en el"
  contributors-conference-support2: "en Carnegie Mellon University, un laboratorio académico para investigación atípica, anti-disciplinaria, e inter-institucional, en la intersección del arte, la ciencia, la tecnología y la cultura."
  contributors-conference-support3: "Esto evento fue posible gracias a una beca del"
  contributors-conference-support4: "y el generoso apoyo de"
  contributors-conference-support5: "y"
  contributors-conference-support6: "¡Gracias!"

reference:
  Reference: "Referencia"

color:
  color-description1: "Este tutorial proviene del libro Learning Processing de Daniel Shiffman, publicado por Morgan Kaufmann, © 2008 Elsevier Inc. Todos los derechos reservados. Fue transcrito a p5 por Kelly Chang. Si detectas algún error o tienes comentarios, "
  color-description2: " por favor escríbenos."
  color-title: "Color"
  color-p1x1: "En el mundo digital hablar de color requiere precisión. No basta con decir, por ejemplo: ¿Puedes hacer un círculo verde azulado?, ya que el color se define como un arreglo de números. Comencemos con el caso más simple: negro, blanco y escala de grises. 0 significa negro, 255 significa blanco. Entre medio, cualquier otro número -50, 87, 162, 209, etc- es un tono gris que va entre negro y blanco."
  color-p2x1: "Al agregar las funciones "
  color-p2x2: " y "
  color-p2x3: " antes de dibujar podemos definir el color de cualquier forma deseada. También existe la función "
  color-p2x4: ", que define el color del lienzo en nuestra pantalla. A continuación hay un ejemplo."
  color-code1: "background(255);    // Define el color del lienzo como blanco \n stroke(0);          // Define el contorno de la forma (stroke) como negro \n fill(150);          // Define el interior de la forma (fill) como gris \n rect(50,50,75,100); // Dibuja un rectángulo"
  color-p3x1: "Tanto el contorno como el interior de la forma pueden ser eliminados con las funciones: "
  color-p3x2: " y "
  color-p3x3: ". Instintivamente podríamos pensar en utilizar \"stroke(0)\" para eliminar el contorno, sin embargo, es importante recordar que 0 no significa \"nada\", sino que indica un color negro. Además, recuerda no eliminar ambos, con "
  color-p3x4: " y "
  color-p3x5: ", porque ¡nada aparecerá!"
  color-p4x1: "Adicionalmente si dibujamos dos figuras, p5.js siempre utilizará la última especificación de contorno y llenado, leyendo el código de arriba a abajo."
  rgb-color-title: "Color RGB"
  rgb-color-p1x1: "¿Alguna vez pintaste con las manos? Al mezclar los colores \"primarios\" podías generar cualquier otro color. Mezclar todos los colores resultaba en un color café fango, y mientras más pintura añadías más oscuro era el resultado. En el mundo digital los colores también se construyen mezclando los tres colores primarios, pero funciona un poco diferente. Primero, los tres colores primarios son otros: rojo, verde y azul (en inglés red, green and blue, es decir, \"RGB\"). Luego, con los colores en tu pantalla estás mezclando luz, no pintura, por lo que las reglas de esta mezcla también son otras."
  rgb-color-li1: "Rojo + Verde = Amarillo"
  rgb-color-li2: "Rojo + Azul = Púrpura"
  rgb-color-li3: "Verde + Azul = Cian (azul-verde)"
  rgb-color-li4: "Rojo + Verde + Azul = Blanco"
  rgb-color-li5: "Ausencia de colores = Negro"
  rgb-color-p2x1: "Lo anterior presupone que los colores son tan brillantes como sea posible, pero por supuesto, hay un rango de color disponible, por lo que un poco de rojo más un poco de verde y azul genera gris, mientras que un poco de rojo más un poco de azul genera púrpura oscuro. \n Si bien puede tomar tiempo acostumbrarte a esto, mientras más programes y experimentes con color RGB, más rápido se hará instintivo, como mezclar pintura con los dedos. \n Y por supuesto no puedes decir \"Mezcla un poco de de rojo con un poco de azul\", debes proveer una cantidad. Así como en la escala de grises, los elementos de color son expresados en rangos desde 0 (ausencia del color) hasta 255 (presencia máxima del color), y son listados en orden R (rojo), G (verde) y B (azul). Obtendrás el resultado de mezclar color RGB por experimentación, pero en adelante cubriremos mediante ejercicios colores más comunes."
  color-transparency-title: "Transparencia"
  color-transparency-p1x1: "Además de los componentes rojo, verde y azul de cada color, existe un cuarto componente opcional denominado \"alfa\" (alpha, en inglés). Alfa significa transparencia y es particularmente útil cuando deseas dibujar figuras que se superponen y a través de las cuales quieres ver. Los valores de alfa de una imagen son llamados también \"canal alfa\" de una imagen."
  color-transparency-p2x1: "Es importante notar que los pixeles no son literalmente transparentes, esto es simplemente una ilusión lograda al mezclar colores. Tras bambalinas p5.js toma los valores de cada color y les asigna un porcentaje, creando una percepción óptica de la mezcla (Si estás interesado en programar vidrios \"color rosa\", aquí es donde debes comenzar)."
  color-transparency-p3x1: "Los valores de alfa también se definen en un rango de 0 a 255, donde 0 es completamente transparente (es decir, 0% de opacidad) y 255 es completamente opaco (es decir, 100% opaco)."
  custom-color-ranges-title: "Rangos de Color Personalizados"
  custom-color-ranges-p1x1: "El modo RGB con rangos de 0 a 255 no es la única forma en que podemos manipular color en p5.js, de hecho p5.js nos permite pensar el color de la manera que deseemos. Por ejemplo, tu podrías preferir pensar el color en rangos de 0 a 100 (como un porcentaje). Esto lo puedes hacer especificando un modo específico de color con la función "
  custom-color-ranges-p2x1: "La expresión anterior dice: \"Ok, queremos pensar el color en términos de rojo, verde y azul, o RGB, en que el rango de cada color pueda estar entre 0  100.\""
  custom-color-ranges-p3x1: "Aunque rara vez sea conveniente, tu también puedes definir distintos rangos para cada componente de color:"
  custom-color-ranges-p4x1: "Con la expresión anterior queremos decir: \"Rango valores en color rojo va de 0 a 100, verde de 0 a 500, azul de 0 a 10 y alfa de 0 a 255.\""
  custom-color-ranges-p5x1: "Finalmente, si bien es probable que tu código requiera sólamente el modo de color RGB, también puedes especificar colores en el modo HSB (tono, saturación y brillo). Sin entrar mayormente en detalle, el color HSB funciona como sigue:"
  custom-color-ranges-li1x1: "Tono o Matiz"
  custom-color-ranges-li1x2: "—El tipo de color, valores por definición van de 0 a 255."
  custom-color-ranges-li2x1: "Saturación"
  custom-color-ranges-li2x2: "—La vivacidad del color, 0 a 255 por definición."
  custom-color-ranges-li3x1: "Brillo"
  custom-color-ranges-li3x2: "—Es el brillo del color, 0 a 255 por definición."
  custom-color-ranges-p6x1: "Con "
  custom-color-ranges-p6x2: " puedes definir tu propio rango de valores. Algunos prefieren un rango de 0-360 para el tono (piensa en los 360 grados de la rueda de color) y 0-100 para la saturación y brillo (piensa en 0-100%)."

coordinate-system:
  coordinate-system-description1: "Este tutorial proviene del libro "
  coordinate-system-description2: "Learning Processing"
  coordinate-system-description3: " de Daniel Shiffman, publicado por Morgan Kaufmann, © 2008 Elsevier Inc. Todos los derechos reservados. Fue transcrito a p5.js por Alex Yixuan Xu. Si detectas algún error o tienes comentarios, por favor "
  coordinate-system-description4: "escríbenos"
  coordinate-system-description5: "."
  coordinate-system-description-title: "Sistema Coordenado y Figuras"
  coordinate-system-description-p1x1: "Antes de comenzar a programar con p5.js debemos primero remontarnos a nuestra infancia, tomar un trozo de papel y dibujar una línea. La distancia más corta entre dos puntos es una línea y ese es nuestro punto de partida, con dos puntos en un gráfico."
  coordinate-system-description-p2x1: "La figura anterior muestra una línea que une un punto A (1,0) y un punto B (4,5). Si le hubieras pedido a un amigo que dibujara la línea por ti, tendrías que haberle dado las indicaciones \"traza una línea desde el punto uno coma cero hasta el punto cuatro coma cinco, por favor\". Bueno, por el momento imagina que tu amigo era un computador al que solicitaste dibujar la misma línea en su pantalla. El mismo comando aplica (solo que en esta caso puedes obviar formalidades y deberás utilizar un formato preciso). Aquí la instrucción es como sigue:"
  coordinate-system-description-p3x1: "Aun sin haber estudiado la sintaxis, la expresión anterior debiera haberte hecho sentido. Estamos entregando a la máquina un comando llamado \"línea\" (al que nos referiremos como \"función\") para ser ejecutado. Adicionalmente estamos espcificando argumentos que indican cómo la línea debería ser dibujada, desde un punto A (1,0) hasta un punto B (4,5). Si pensamos una línea de código como una frase, la función es un verbo y los argumentos son los objetos de la frase. La frase de código termina con un punto y coma en vez de un punto final."
  coordinate-system-description-p4x1: "La clave aquí es darse cuenta que la pantalla del computador es la abstracción de un trozo de papel. Cada pixel de la pantalla es una coordenada -dos números, \"x\" (horizontal) e \"y\" (vertical)- que determinan la ubicación de un punto en el espacio. Y es nuestro trabajo especificar qué figuras y colores debieran apareceren en dicha coordenada de pixeles."
  coordinate-system-description-p5x1: "Sin embargo hay una trampa. El gráfico que nos enseñaron cuando chicos (\"Sistema Coordenado Cartesiano\") ubicaba el punto (0,0) en el centro con el \"eje y\" apuntando hacia arriba, y el \"eje x\" apuntando hacia la derecho (hacia los números positivos, los negativos hacia la izquierda y abajo). El sistema coordenado para pixeles en una pantalla de computador, en cambio, está invertido en el eje y. (0,0) se ubica en la parte superior izquierda con la dirección positiva apuntando horizontalmente hacia la derecha y abajo."
  simple-shapes-title: "Formas Primitivas"
  simple-shapes-p1x1: "La mayoría de los ejemplos que verás en p5.js son de naturaleza visual. Ellos implican principalmente dibujar figuras y definir coordenadas de pixeles. Comencemos observando las cuatro formas primitivas."
  simple-shapes-p2x1: "Para cada figura nos debemos preguntar qué información requerimos para especificar su ubicación y tamaño (y luego su color) y entender cómo p5.js espera recibir dicha información. En cada uno de los siguientes diagramas asumiremos una ventana de 10 pixeles de ancho y 10 pixeles de alto. Esto no es necesariamente realista ya que cuando comiences a trabajar probablemente preferirás una ventana mucho más grande (10x10 pixeles no es más que unos pocos milímetros en el espacio). Sin embargo con fines explicativos es preferible trabajar con numeros más pequeños de modo de presentar los pixeles como aparecerían en un gráfico de papel (por ahora) para ilustrar mejor el funcionamiento de cada linea de código."
  simple-shapes-p3x1: "Un "
  simple-shapes-p3x2: " es la forma más simple y un buen lugar para comenzar. Para dibujar un punto solo necesitamos un par ordenado (x,y)."
  simple-shapes-p4x1: "Una "
  simple-shapes-p4x2: " tampoco es terriblemente compleja y solo requiere dos puntos: (x1,y1) y (x2,y2):"
  simple-shapes-p5x1: "Una vez que llegamos a dibujar un "
  simple-shapes-p5x2: ", las cosas se tornan un poco más complejas. En p5.js un rectángulo se especifica con las coordenadas de su esquina superior izquierda, así como ancho y alto."
  simple-shapes-p6x1: "Una segunda manera de dibujar un rectángulo requiere especificar su punto central junto con su ancho y alto. Si preferimos este método, debemos indicar previamente que queremos utilizar el modo "
  simple-shapes-p6x2: " antes de la instrucción del propio rectángulo. Notemos que p5.js es sensible a cada caso."
  simple-shapes-p7x1: "Finalmente podemos dibujar un rectángulo con dos puntos (la esquina superior izquierda y la esquina superior derecha). El modo en este caso es "
  simple-shapes-p7x2: ". Notar que este ejemplo entrega el mismo resultado en pantalla que el ejemplo anterior."
  simple-shapes-p8x1: "Una vez que nos hemos familiarizado con el concepto de dibujar un rectángulo, una "
  simple-shapes-p8x2: " es muy sencilla de dibujar. De hecho es idéntica al "
  simple-shapes-p8x3: " con la diferencia de que la elipse se dibuja donde la caja que contiene al rectángulo debiera estar. El modo por defecto para la "
  simple-shapes-p8x4: " es "
  simple-shapes-p8x5: ", en vez de "
  simple-shapes-p8x6: "."
  simple-shapes-p9x1: "Es imporante considerar que esta elipse no se ve perfectamente circular. p5.js ha integrado una metodología para seleccionar qué pixeles deberían ser usados para crear una forma circular. Si nos acercamos a ella vemos un grupo de cuadrados distribuidos en una forma circular, pero si nos alejamos al nivel de una pantalla de computador tenemos una suave y redonda circunferencia. p5.js también nos otorga el poder de desarrollar nuestros propios algoritmos para colorear pixeles individualmente (de hecho, podemos imaginar cómo sería hacer esto utlizando la función \"point\" una y otra vez), pero por ahora conformémonos con utilizar el comando \"ellipse\" para hacerlo. (Para más información sobre pixeles, puedes comenzar con: la "
  simple-shapes-p9x2: "página de referencia Pixeles"
  simple-shapes-p9x3: ", que es mucho más avanzada y compleja que este tutorial)."
  simple-shapes-p10x1: "Ahora observemos una aplicación un poco más realista, con una pantalla de dimensiones 200 por 200. Notemos el uso de la función createCanvas() para especificar el tamaño de la ventana."
