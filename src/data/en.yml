Home: "Home"
Download: "Download"
Start: "Start"
Reference: "Reference"
Libraries: "Libraries"
Learn: "Learn"
Examples: "Examples"
Books: "Books"
Community: "Community"
Contribute: "Contribute"
Forum: "Forum"

footer1: "p5.js was created by "
footer2: " and is developed by a community of collaborators, with support from the "
footer3: " and "
footer4: "Identity and graphic design by "

tagline1: "Processing fun times JavaScript quirkiness"
tagline2: "Processing simplicity times JavaScript flexibility"
tagline3: "Processing intuition times JavaScript power"
tagline4: "Processing creativity times JavaScript dynamism"
tagline5: "Processing community times JavaScript community"
tagline6: "the power of Processing times the reach of JavaScript"

home:
  Download: "Download"
  Start: "Start"
  Reference: "Reference"
  Libraries: "Libraries"
  Learn: "Learn"
  Community: "Community"
  p1x1: "Hello! p5.js is a JavaScript library that starts with the original goal of "
  p1x2: ", to make coding accessible for artists, designers, educators, and beginners, and reinterprets this for today's web."
  p2x1: "Using the original metaphor of a software sketchbook, p5.js has a full set of drawing functionality. However, you're not limited to your drawing canvas, you can think of your whole browser page as your sketch! For this, p5.js has addon"
  libraries: " libraries"
  p2x2: " that make it"
  interact: " easy to interact"
  p2x3: " with other HTML5 objects, including text, input, video, webcam, and sound."
  p3x1: "p5.js is a new interpretation, not an emulation or port, and it is in active development."
  p3x2: "Try it out now in the new p5.js Web Editor!"
  sketch_by: "by"
  sketch_info: "CC Fest! November 10 @ NYU ITP"
  sketch_info_link: "http://ccfest.rocks/"

copyright:
  copyright1: "The p5.js library is free software; you can redistribute it and/or modify it under the terms of the "
  copyright2: " as published by the Free Software Foundation, version 2.1."
  copyright3: "The Reference for the language is under a "
  copyright4: " license which makes it possible to reuse this content for non-commercial purposes if it is credited."

get started:
  get-started-title: "Get Started"
  get-started1: "This page walks you through setting up a p5.js project and making your first sketch."
  get-started2: "If you'd like to start with the new "
  get-started3: "p5.js Web Editor"
  get-started4: ", you can jump down to"
  get-started5: "Your First Sketch"
  download-title: "Download and File Setup"
  download1: "The easiest way to start is by using the empty example that comes with the "
  download2: "p5.js complete"
  download3: " download."
  download4: "If you look in index.html, you'll notice that it links to the file p5.js. If you would like to use the minified version (compressed for faster page loading), change the link to p5.min.js."
  download5: "Alternatively, you can link to a p5.js file hosted online. All versions of p5.js are stored in a CDN (Content Delivery Network). You can see a history of these versions here: "
  download6: ". In this case you can change the link to:"
  download7: "A sample HTML page might look like this:"
  download8: "You can also start with this template from "
  download9: "."
  environment-title: "Environment"
  environment1: "You can use the "
  environmentlink: "http://en.wikipedia.org/wiki/Source_code_editor"
  environment2: " code editor "
  environment3: "of your choice. Instructions for getting set up with "
  environment4: " are included below, other good editor options include "
  environment5: " and "
  environment6: "If you are a screen reader user and not using the p5 web editor, you may want to use "
  environment7: " or "
  environment8: "Open Sublime. Go to the File menu and choose Open... and choose the folder that your html and js files are located in. On the left sidebar, you should now see the folder name at the top, with a list of the files contained in the folder directly below."
  environment9: "Click on your sketch.js file and it will open on the right where you can edit it. "
  environment10: "p5 starter code opened up in sublime editor."
  environment11: "Open the index.html file in your browser by double clicking on it in your file manager or type:"
  environment12: "file:///the/file/path/to/your/html"
  environment13: " in the address bar to view your sketch."
  your-first-sketch-title: "Your First Sketch"
  your-first-sketch-intro1: "Processing users may want to check out the "
  your-first-sketch-intro2: "https://github.com/processing/p5.js/wiki/Processing-transition"
  your-first-sketch-intro3: "Processing transition tutorial"
  your-first-sketch-intro4: "In your editor, type the following:"
  your-first-sketch2: "This line of code means \"draw an ellipse, with the center 50 pixels over from the left and 50 pixels down from the top, with a width and height of 80 pixels\"."
  your-first-sketch3: "Save your sketch and refresh your page view in your browser. If you've typed  everything correctly, you'll see this appear in the display window:"
  your-first-sketch4: "Note: If you are using a screen reader, you must either turn on the accessible outputs in the p5 online editor, outside the editor you must add the accessibility library in your html. To learn about "
  your-first-sketch5: "using p5 with a screen reader click here"
  your-first-sketch6: " and to learn more about "
  your-first-sketch7: "the accessibility library here"
  your-first-sketch8: "canvas has a circle of width and height 50 at position 80 x and 80 y"
  your-first-sketch9: "If you didn't type it correctly, you might not see anything. If this happens, make sure that you've copied the example code exactly: the numbers should be contained within parentheses and have commas between each of them, and the line should end with a semicolon."
  your-first-sketch10: "One of the most difficult things about getting started with programming is that you have to be very specific about the syntax. The browser isn't always smart enough to know what you mean, and can be quite fussy about the placement of punctuation. You'll get used to it with a little practice. Depending on the browser you are using, you can also see errors by looking at the JavaScript \"console\". In Chrome, for example, this is under View > Developer > JavaScript Console."
  your-first-sketch11: "Next, we'll skip ahead to a sketch that's a little more exciting. Delete the text from the last example, and try this:"
  your-first-sketch12: "This program creates a window that is 640 pixels wide and 480 pixels high, and then starts drawing white circles at the position of the mouse. When a mouse button is pressed, the circle color changes to black. We'll explain more about the elements of this program in detail later. For now, run the code, move the mouse, and click to experience it."
  your-first-sketch13: "canvas has multiple circles drawn on it following the path of the mouse"
  what-next-title: "What Next?"
  processing-transition1: "Read the "
  processing-transition2: "https://github.com/processing/p5.js/wiki/Processing-transition"
  processing-transition3: "Processing transition tutorial"
  processing-transition4: " to learn how to convert from Processing to p5.js, and the main differences between them."
  reference1: "View the "
  reference2: " reference"
  reference3: " for full documentation."
  learn1: "Check out the "
  learn2: "learn"
  learn3: " page and "
  learn4: "examples"
  learn5: " page for more."
  learn6: "If you wish to use p5 with a screenreader, check out the "
  learn7: "p5 with a screenreader tutorial"
  book1: "Parts of this tutorial were adapted from the book, Getting Started with p5.js, by Lauren McCarthy, Casey Reas, and Ben Fry, O'Reilly / Make 2015. Copyright "
  book2: 2015 Lauren McCarthy, Casey Reas, and Ben Fry. All rights reserved.

download:
  Download: "Download"
  complete-library-title: "Complete Library"
  p5.js-complete: "p5.js complete"
  includes-1: "Includes:"
  includes-2: "p5.js, p5.dom.js, p5.sound.js, and an example project"
  includes-3: "Version "
  single-files-title: "Single Files"
  single-file: "Single file: "
  p5.js-uncompressed: "Full uncompressed version"
  compressed: "Compressed version"
  link: "Link: "
  statically-hosted-file: "Statically hosted file"
  editor-title: "Editor"
  p5.js-editor: "p5.js Web Editor"
  editor-includes: "Start coding using the p5.js Web Editor, no setup required!"
  etc-title: "ETC"
  older-releases: "Older releases / changelog "
  report-bugs: "Report bugs "
  supported-browsers: "Supported browsers "
  support-title: "Support p5.js!"
  support-1: "p5.js is free, open-source software. We want to make our community as open and inclusive as possible. You can support this work by "
  support-2: "becoming a member"
  support-3: " of the Processing Foundation as an individual, a studio, or an educational institution. You can also "
  support-4: "make a donation"
  support-5: " without purchasing a membership."
  support-6: "Individual"
  support-7: "$25"
  support-8: "Studio"
  support-9: "$250"
  support-10: "Educational Institution"
  support-11: "$5/student or $500"
  support-12: "Your membership supports software development (for p5.js, Processing, Processing.py, Processing for Android and ARM devices, education resources like code examples and tutorials, "
  support-13: "Fellowships"
  support-14: ", and "
  support-15: "community events"
  support-16: ". We need your help!"
  support-17: "p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in Pittsburgh (Image credit: Taeyoon Choi)"
  support-18: "Processing Fellow Saskia Freeke is organizing Code Liberation x Processing workshops in London (Image credit: Code Liberation Foundation)"
  support-19: "Learning to Teach, Teaching to Learn conference with SFPC (Image credit: Kira Simon-Kennedy)"
  support-20: "Processing Foundation Fellow Cassie Tarakajian’s workshop at Code Art Miami (Image credit: Christian Arévalo Photography)"
  support-21: "Taeyoon Choi and ASL interpretor at Signing Coders p5.js workshop (Image credit: Taeyoon Choi)"
  support-22: "Google Summer of Code kickoff (Image credit: Taeyoon Choi)"
  support-23: "Processing Foundation Fellow Cassie Tarakajian’s workshop at Code Art Miami (Image credit: Christian Arévalo Photography)"
  support-24: "Luisa Pereira and Yeseul Song helping facilitate a sign language based p5.js workshop led by Taeyoon Choi (Image credit: Taeyoon Choi)"
  support-25: "p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in Pittsburgh (Image credit: Taeyoon Choi)"
  support-26: "Processing Fellow Digital Citizens Lab hosts a panel on STEM teaching at the International Center of Photography (Image credit: International Center of Photography)"
  support-27: "Participants at p5.js workshop in Santiago, Chile, led by Aarón Montoya-Moraga (Image credit: Aarón Montoya-Moraga.)"
  support-28: "Claire Kearney-Volpe helping facilitate a sign language based p5.js workshop led by Taeyoon Choi (Image credit: Taeyoon Choi)"
  support-29: "Processing Foundation Fellow DIY Girls run a creative coding program in Los Angeles (Image credit: DIY Girls)"
  support-30: "Processing Fellow Digital Citizens Lab"
  support-31: "Bicoastal p5.js meetup at UCLA DMA and NYU ITP"
  support-32: "The Processing Foundation"
  support-33: " was founded in 2012 after more than a decade of work with the original Processing software. The Foundation’s mission is to promote software literacy within the visual arts, and visual literacy within technology-related fields — and to make these fields accessible to diverse communities. Our goal is to empower people of all interests and backgrounds to learn how to program and make creative work with code, especially those who might not otherwise have access to these tools and resources."

learn:
  learn-title: "Learn"
  learn1: "These tutorials provide more in-depth or step-by-step overviews of particular topics. Check out the "
  learn2: "examples page"
  learn3: "to see short demonstrations of various p5.js topics."
  introduction-to-p5js-title: "Introduction to p5.js"
  hello-p5js-title: "Hello p5.js"
  hello-p5js: "This short video will introduce you to the library and what you can do with it."
  getting-started-title: "Getting Started"
  getting-started: "Welcome to p5.js! <br> This introduction covers the basics of setting up a p5.js project."
  p5js-overview-title: "p5.js overview"
  p5js-overview: "An overview of the main features of p5.js."
  p5js-processing-title: "p5.js and Processing"
  p5js-processing: "The main differences between the two, and how to convert from one to the other."
  p5-screen-reader-title: "p5 with a screen reader"
  p5-screen-reader: "Setting up p5 so that it can be used easily with a screen reader."
  using-local-server-title: "Using a local server"
  using-local-server: "How to set up a local server on Mac OSX, Windows, or Linux."
  connecting-p5js-title: "Connecting p5.js"
  creating-libraries-title: "Creating libraries"
  creating-libraries: "Creating p5.js addon libraries."
  nodejs-and-socketio-title: "node.js and socket.io"
  nodejs-and-socketio: "Using a node.js server with p5.js, communication via socket.io."
  programming-topics-title: "Programming topics"
  beyond-the-canvas-title: "Beyond the canvas"
  beyond-the-canvas: "Creating and manipulating elements on the page beyond the canvas."
  3d-webgl-title: "3D/WebGL"
  3d-webgl: "Developing advanced graphics applications in p5.js using WEBGL mode."
  color-title: "Color"
  color: "An introduction to digital color."
  coordinate-system-and-shapes-title: "Coordinate System and Shapes"
  coordinate-system-and-shapes: "Drawing simple shapes and using the coordinate system."
  interactivity-title: "Interactivity"
  interactivity: "Introduction to interactivity with the mouse and keyboard."
  program-flow-title: "Program Flow"
  program-flow: "Introduction to controlling program flow in p5.js."
  curves-title: "Curves"
  curves: "An introduction to the three types of curves in p5.js: arcs, spline curves, and Bézier curves."
  becoming-a-better-programmer-title: "Becoming a better programmer"
  debugging-title: "Debugging"
  debugging: "Field guide to debugging for everyone."
  optimizing-title: "Optimizing p5.js code for performance"
  optimizing: "A tutorial of tips and tricks for optimizing your code to make it run faster and smoother."
  test-driven-development-title: "Unit testing and test driven development"
  test-driven-development: "Save yourself from agony on install day. What is unit testing and how to use it? By Andy Timmons."
  contributing-to-the-community-title: "Contributing to the community"
  development-title: "Development"
  development: "Getting started and overview for contributing to development."
  looking-inside-title: "Looking inside p5"
  looking-inside: "A friendly intro to the file structure and tools for p5.js development, by Luisa Pereira."
  writing-tutorial-title: "Writing a tutorial"
  writing-tutorial: "A guide to writing a p5.js programming tutorial."
  writing-a-tutorial-title: "Guide to contributing p5.js tutorials"
  writing-a-tutorial-author: "This tutorial was written by Tega Brain."
  writing-a-tutorial-1: "We invite educators, contributors and general enthusiasts to contribute p5js tutorials. The p5js project makes creative coding and open source development more accessible to a diverse community and we are excited to publish tutorials on all aspects of the development process. Our learning materials so far include guides on learning p5, programming technique and how to contribute to an open source project."
  writing-a-tutorial-2: "We welcome new written tutorial contributions and this guide outlines the steps of how to propose, prepare and contribute."
  writing-a-tutorial-how-start-title: "How to get started:"
  writing-a-tutorial-how-start-1: "Check that your proposed topic has not already been covered. There is "
  writing-a-tutorial-how-start-2: "a working spreadsheet here"
  writing-a-tutorial-how-start-3: "that outlines in progress tutorials. If your topic is listed as in progress, perhaps you can add to work being done and contribute to preparing existing work for publication so please reach out to us."
  writing-a-tutorial-how-start-4: "If your topic is not already covered and is not listed as in progress, please write a few sentences on what you propose to cover and email us this description at education@p5js.org."
  writing-a-tutorial-how-prepare-title: "How to prepare a p5js tutorial for publication online:"
  writing-a-tutorial-how-prepare-1: "When your tutorial is ready for publication, please follow these steps to prepare your content for the p5js website."
  writing-a-tutorial-how-prepare-2: "Prepare the content of your tutorial as a tutorial-name.hbs file with "
  writing-a-tutorial-how-prepare-3: "this basic structure"
  writing-a-tutorial-how-prepare-4: ". As is shown in this file, it must contain a header as shown below:"
  writing-a-tutorial-how-prepare-5: "The folder containing your tutorial will be placed in the 'tutorials' folder of the p5js site. The file called index.hbs is the "
  writing-a-tutorial-how-prepare-6: "p5.js tutorials landing page,"
  writing-a-tutorial-how-prepare-7: " and the test-tutorial.hbs file is the test tutorial."
  writing-a-tutorial-how-prepare-8: "All content should go in the:"
  writing-a-tutorial-how-prepare-9: "tags on the page, with formatting defined by the &lt;h1&gt; and &lt;h2&gt; tags, the &lt;p&gt; paragraph tags as is done shown on the"
  writing-a-tutorial-how-prepare-10: "test tutorial page."
  writing-a-tutorial-how-prepare-11: "If your tutorial contains images, they are to be placed in the assets folder of the p5 site, in the location src/assets/learn/test-tutorial/images as shown below."
  writing-a-tutorial-how-prepare-12: "To correctly format code in the html of the page use the tag:"
  writing-a-tutorial-embedding-title: "Embedding p5.js sketches"
  writing-a-tutorial-embedding-1: "Using p5js means you can illustrate your tutorial with animated, interactive or editable code examples to demonstrate programming concepts. Your examples should be prepared as p5.js sketches and can be embedded into the tutorial in two ways."
  writing-a-tutorial-embedding-2: "If the example is to be editable like in "
  writing-a-tutorial-embedding-3: "the reference pages"
  writing-a-tutorial-embedding-4: " of the p5js site, the p5 sketch should be embedded into the html page using the p5js widget. Follow "
  writing-a-tutorial-embedding-5: "this guide "
  writing-a-tutorial-embedding-6: "on how to embed p5js sketches using the widget written by "
  writing-a-tutorial-embedding-7: ". You can also see this in action on the"
  writing-a-tutorial-embedding-8: " test tutorial page"
  writing-a-tutorial-embedding-9: "."
  writing-a-tutorial-embedding-10: "If the example is to be animated and/or interactive but not editable. The p5.js sketch should be embedded into the page as an iframe as described below."
  writing-a-tutorial-iframe-title: "Embed a p5 sketch using an iframe"
  writing-a-tutorial-iframe-1: "An iframe is like creating a window through which you can see another page, sandboxed from the rest of your page. In this case it will be a window to the index.html containing your p5.js sketch. "
  writing-a-tutorial-iframe-2: "Put your p5 sketches in the /src/assets/learn folder of the site, in a folder labelled with the name of your sketch as shown in the screenshot. This is where all the images and p5 sketches linked by iframe should be stored."
  writing-a-tutorial-iframe-3: "In the subfolders containing your p5 examples there should be a sketch.js file and the embed.html file for the sketch. "
  writing-a-tutorial-iframe-4: "Make sure your embed.html file has the correct paths to the p5 libraries of the site. If your file structure is the same as above, the path to the p5.js library should be \"../../../js/p5.min.js\"."
  writing-a-tutorial-iframe-5: "You can then embed the p5js index files as iframes in the .hbs file that contains your tutorial content. The embed code for the iframe would then be: "
  writing-a-tutorial-iframe-6: "Styling for the iframe (this could directly into the post or in a stylesheet):  "
  writing-a-tutorial-iframe-7: "Here you can see the naked sketch running: "
  writing-a-tutorial-iframe-8: "And here it is embedded in the p5 site using the code below:  "
  writing-a-tutorial-iframe-9: "One thing to note is that you need to manually set the size of the iframe, so it works best if things are a standard size."
  writing-a-tutorial-iframe-10: "Also note that the links to the p5.js library files do not happen from the .eps page with all the tutorial content. Instead they will be located in the html page that is rendering your sketch (in this case, called embed.html)."
  writing-a-tutorial-iframe-11: "More information on embedding p5.js sketches can be found "
  writing-a-tutorial-embed-iframe-12: "here."
  writing-a-tutorial-finishing-title: "Finishing up"
  writing-a-tutorial-finishing-1: "Once your have finished writing your tutorial and your content has been given the thumbs up. Fork the p5.js website repository, prepare your content as described above and then issue a pull request to the p5.js website repository so we can publish your contribution!"
  writing-a-tutorial-finishing-2: "Thank you!"
  color-description1: "This tutorial is from the book Learning Processing by Daniel Shiffman, published by Morgan Kaufmann, © 2008 Elsevier Inc. All rights reserved. It was ported to P5 by Kelly Chang. If you see any errors or have comments, "
  color-description2: " please let us know."
  color-title: "Color"
  color-p1x1: "In the digital world, when we want to talk about a color, precision is required. Saying \"Hey, can you make that circle bluish-green?\" will not do. Color, rather, is defined as a range of numbers. Let's start with the simplest case: black & white or grayscale. 0 means black, 255 means white. In between, every other number—50, 87, 162, 209, and so on—is a shade of gray ranging from black to white."
  color-p2x1: "By adding the "
  color-p2x2: " and "
  color-p2x3: " functions before something is drawn, we can set the color of any given shape. There is also the function "
  color-p2x4: ", which sets a background color for the window. Here's an example."
  color-code1: "background(255);    // Setting the background to white \n stroke(0);          // Setting the outline (stroke) to black \n fill(150);          // Setting the interior of a shape (fill) to grey \n rect(50,50,75,100); // Drawing the rectangle"
  color-p3x1: "Stroke or fill can be eliminated with the functions: "
  color-p3x2: " and "
  color-p3x3: ". Our instinct might be to say \"stroke(0)\" for no outline, however, it is important to remember that 0 is not \"nothing\", but rather denotes the color black. Also, remember not to eliminate both—with "
  color-p3x4: " and "
  color-p3x5: ", nothing will appear!"
  color-p4x1: "In addition, if we draw two shapes, p5.js will always use the most recently specified stroke and fill, reading the code from top to bottom."
  color-rgb-title: "RGB Color"
  color-rgb-p1x1: "Remember finger painting? By mixing three \"primary\" colors, any color could be generated. Swirling all colors together resulted in a muddy brown. The more paint you added, the darker it got. Digital colors are also constructed by mixing three primary colors, but it works differently from paint. First, the primaries are different: red, green, and blue (i.e., \"RGB\" color). And with color on the screen, you are mixing light, not paint, so the mixing rules are different as well."
  color-rgb-li1: "Red + Green = Yellow"
  color-rgb-li2: "Red + Blue = Purple"
  color-rgb-li3: "Green + Blue = Cyan (blue-green)"
  color-rgb-li4: "Red + Green + Blue = White"
  color-rgb-li5: "No colors = Black"
  color-rgb-p2x1: "This assumes that the colors are all as bright as possible, but of course, you have a range of color available, so some red plus some green plus some blue equals gray, and a bit of red plus a bit of blue equals dark purple. While this may take some getting used to, the more you program and experiment with RGB color, the more it will become instinctive, much like swirling colors with your fingers. And of course you can't say \"Mix some red with a bit of blue,\" you have to provide an exact amount. As with grayscale, the individual color elements are expressed as ranges from 0 (none of that color) to 255 (as much as possible), and they are listed in the order R, G, and B. You will get the hang of RGB color mixing through experimentation, but next we will cover some code using some common colors."
  color-transparency-title: "Color Transparency"
  color-transparency-p1x1: "In addition to the red, green, and blue components of each color, there is an additional optional fourth component, referred to as the color's \"alpha\". Alpha means transparency and is particularly useful when you want to draw elements that appear partially see-through on top of one another. The alpha values for an image are sometimes referred to collectively as the \"alpha channel\" of an image."
  color-transparency-p2x1: "It is important to realize that pixels are not literally transparent, this is simply a convenient illusion that is accomplished by blending colors. Behind the scenes, p5.js takes the color numbers and adds a percentage of one to a percentage of another, creating the optical perception of blending. (If you are interested in programming \"rose-colored\" glasses, this is where you would begin.)"
  color-transparency-p3x1: "Alpha values also range from 0 to 255, with 0 being completely transparent (i.e., 0% opaque) and 255 completely opaque (i.e., 100% opaque)."
  color-custom-ranges-title: "Custom Color Ranges"
  color-custom-ranges-p1x1: "RGB color with ranges of 0 to 255 is not the only way you can handle color in p5.js, in fact, it allows us to think about color any way we like. For example, you might prefer to think of color as ranging from 0 to 100 (like a percentage). You can do this by specifying a custom "
  color-custom-ranges-p2x1: "The above function says: \"OK, we want to think about color in terms of red, green, and blue. The range of RGB values will be from 0 to 100.\""
  color-custom-ranges-p3x1: "Although it is rarely convenient to do so, you can also have different ranges for each color component:"
  color-custom-ranges-p4x1: "Now we are saying \"Red values go from 0 to 100, green from 0 to 500, blue from 0 to 10, and alpha from 0 to 255.\""
  color-custom-ranges-p5x1: "Finally, while you will likely only need RGB color for all of your programming needs, you can also specify colors in the HSB (hue, saturation, and brightness) mode. Without getting into too much detail, HSB color works as follows:"
  color-custom-ranges-li1x1: "Hue"
  color-custom-ranges-li1x2: "—The color type, ranges from 0 to 255 by default."
  color-custom-ranges-li2x1: "Saturation"
  color-custom-ranges-li2x2: "—The vibrancy of the color, 0 to 255 by default."
  color-custom-ranges-li3x1: "Brightness"
  color-custom-ranges-li3x2: "—The, well, brightness of the color, 0 to 255 by default."
  color-custom-ranges-p6x1: "With "
  color-custom-ranges-p6x2: " you can set your own ranges for these values. Some prefer a range of 0-360 for hue (think of 360 degrees on a color wheel) and 0-100 for saturation and brightness (think of 0-100%)."
  coordinate-system-description1: "This tutorial is from the book "
  coordinate-system-description2: "Learning Processing"
  coordinate-system-description3: " by Daniel Shiffman, published by Morgan Kaufmann, © 2008 Elsevier Inc. All rights reserved. It was ported to p5.js by Alex Yixuan Xu. If you see any errors or have comments, please "
  coordinate-system-description4: "let us know"
  coordinate-system-description5: "."
  coordinate-system-description-title: "Coordinate System and Shapes"
  coordinate-system-description-p1x1: "Before we begin programming with p5, we must first channel our eighth grade selves, pull out a piece of graph paper, and draw a line. The shortest distance between two points is a good old fashioned line, and this is where we begin, with two points on that graph paper."
  coordinate-system-description-p2x1: "The above figure shows a line between point A (1,0) and point B (4,5). If you wanted to direct a friend of yours to draw that same line, you would give them a shout and say \"draw a line from the point one-zero to the point four-five, please.\" Well, for the moment, imagine your friend was a computer and you wanted to instruct this digital pal to display that same line on its screen. The same command applies (only this time you can skip the pleasantries and you will be required to employ a precise formatting). Here, the instruction will look like this:"
  coordinate-system-description-p3x1: "Even without having studied the syntax of writing code, the above statement should make a fair amount of sense. We are providing a command (which we will refer to as a \"function\") for the machine to follow entitled \"line.\" In addition, we are specifying some arguments for how that line should be drawn, from point A (1,0) to point B (4,5). If you think of that line of code as a sentence, the function is a verb and the arguments are the objects of the sentence. The code sentence also ends with a semicolon instead of a period."
  coordinate-system-description-p4x1: "The key here is to realize that the computer screen is nothing more than a fancier piece of graph paper. Each pixel of the screen is a coordinate - two numbers, an \"x\" (horizontal) and a \"y\" (vertical) - that determines the location of a point in space. And it is our job to specify what shapes and colors should appear at these pixel coordinates."
  coordinate-system-description-p5x1: "Nevertheless, there is a catch here. The graph paper from eighth grade (\"Cartesian coordinate system\") placed (0,0) in the center with the y-axis pointing up and the x-axis pointing to the right (in the positive direction, negative down and to the left). The coordinate system for pixels in a computer window, however, is reversed along the y-axis. (0,0) can be found at the top left with the positive direction to the right horizontally and down vertically."
  coordinate-system-simple-shapes-title: "Simple Shapes"
  coordinate-system-simple-shapes-p1x1: "The vast majority of the programming examples you'll see with p5 are visual in nature. These examples, at their core, involve drawing shapes and setting pixels. Let's begin by looking at four primitive shapes."
  coordinate-system-simple-shapes-p2x1: "For each shape, we will ask ourselves what information is required to specify the location and size (and later color) of that shape and learn how p5 expects to receive that information. In each of the diagrams below, we'll assume a window with a width of 10 pixels and height of 10 pixels. This isn't particularly realistic since when you really start coding you will most likely work with much larger windows (10x10 pixels is barely a few millimeters of screen space.) Nevertheless for demonstration purposes, it is nice to work with smaller numbers in order to present the pixels as they might appear on graph paper (for now) to better illustrate the inner workings of each line of code."
  coordinate-system-simple-shapes-p3x1: "A "
  coordinate-system-simple-shapes-p3x2: " is the easiest of the shapes and a good place to start. To draw a point, we only need an x and y coordinate."
  coordinate-system-simple-shapes-p4x1: "A "
  coordinate-system-simple-shapes-p4x2: " isn't terribly difficult either and simply requires two points: (x1,y1) and (x2,y2):"
  coordinate-system-simple-shapes-p5x1: "Once we arrive at drawing a "
  coordinate-system-simple-shapes-p5x2: ", things become a bit more complicated. In p5, a rectangle is specified by the coordinate for the top left corner of the rectangle, as well as its width and height."
  coordinate-system-simple-shapes-p6x1: "A second way to draw a rectangle involves specifying the centerpoint, along with width and height. If we prefer this method, we first indicate that we want to use the "
  coordinate-system-simple-shapes-p6x2: " mode before the instruction for the rectangle itself. Note that p5 is case-sensitive."
  coordinate-system-simple-shapes-p7x1: "Finally, we can also draw a rectangle with two points (the top left corner and the bottom right corner). The mode here is "
  coordinate-system-simple-shapes-p7x2: ". Note this example gives the same result on screen as the example above."
  coordinate-system-simple-shapes-p8x1: "Once we have become comfortable with the concept of drawing a rectangle, an "
  coordinate-system-simple-shapes-p8x2: " is a snap. In fact, it is identical to "
  coordinate-system-simple-shapes-p8x3: " with the difference being that an ellipse is drawn where the bounding box of the rectangle would be. The default mode for "
  coordinate-system-simple-shapes-p8x4: " is "
  coordinate-system-simple-shapes-p8x5: ", rather than "
  coordinate-system-simple-shapes-p8x6: "."
  coordinate-system-simple-shapes-p9x1: "It is important to acknowledge that these ellipses do not look particularly circular. p5 has a built-in methodology for selecting which pixels should be used to create a circular shape. Zoomed in like this, we get a bunch of squares in a circle-like pattern, but zoomed out on a computer screen, we get a nice round ellipse. p5 also gives us the power to develop our own algorithms for coloring in individual pixels (in fact, we can already imagine how we might do this using \"point\" over and over again), but for now, we are content with allowing the \"ellipse\" statement to do the hard work. (For more about pixels, start with: the "
  coordinate-system-simple-shapes-p9x2: "pixels reference page"
  coordinate-system-simple-shapes-p9x3: ", though be warned this is a great deal more advanced than this tutorial.)"
  coordinate-system-simple-shapes-p10x1: "Now let's look at what some code with shapes in more realistic setting, with window dimensions of 200 by 200. Note the use of the createCanvas() function to specify the width and height of the window."

test-tutorial:

libraries:
  Libraries: "Libraries"
  p5.dom: "p5.dom lets you interact with HTML5 objects beyond the canvas, including video, audio, webcam, input, and text."
  p5.sound: "p5.sound extends p5 with Web Audio functionality including audio input, playback, analysis and synthesis."
  p5.accessibility: "p5.accessibility makes the p5 canvas more accessible to people who are blind and visually impaired."
  Contributed: "Contributed"
  p5.serial1: "p5.serial enables serial communication between devices that support serial (RS-232) and p5 sketches running in the browser. Created by "
  p5.serial2: ", with contributions from "
  p5.serial3: " and "
  p5.collide2D: "p5.collide2D provides tools for calculating collision detection for 2D geometry with p5.js. Created by "
  rita.js: "RiTa.js provides a set of natural language processing objects for generative literature. Created by "
  p5.geolocation: "p5.geolocation provides techniques for acquiring, watching, calculating, and geofencing user locations for p5.js. Created by "
  p5.speech: "p5.speech provides simple, clear access to the Web Speech and Speech Recognition APIs, allowing for the easy creation of sketches that can talk and listen. Created by "
  p5.bots: "With p5.bots you can interact with your Arduino (or other microprocessor) from within the browser. Use sensor data to drive a sketch; use a sketch to drive LEDs, motors, and more! Created by "
  grafica.js: "grafica.js lets you add simple but highly configurable 2D plots to your p5.js sketches. Created by "
  p5.play: "p5.play provides sprites, animations, input and collision functions for games and gamelike applications. Created by "
  p5.gui: "p5.gui generates a graphical user interface for your p5.js sketches. Created by "
  p5.gibber: "p5.gibber provides rapid music sequencing and audio synthesis capabilities. Created by "
  p5.particle: "The Particle and Fountain objects can be used to create data-driven effects that are defined through user structures or JSON input and user-draw functions. Created by "
  p5.scribble: "Draw 2D primitives in a sketchy look. Created by Janneck Wullschleger, based on a port of the original Processing library "
  p5.tiledmap1: "p5.tiledmap provides drawing and helper functions to include maps made with"
  p5.tiledmap2: "in your sketches. Created by "
  p5.dimensions1: "p5.dimensions extends p5.js' vector functions to work in any number of dimensions. Created by "
  p5.dimensions2: " and "
  p5.scenemanager: "p5.SceneManager helps you create sketches with multiple states / scenes. Each scene is a like a sketch within the main sketch. Created by "
  mappa: "Mappa provides a set of tools for working with static maps, tile maps, and geo-data. Useful when building geolocation-based visual representations. Created by "
  p5.func: "p5.func is a p5 extension that provides new objects and utilities for function generation in the time, frequency, and spatial domains. Created by "
  p5.voronoi: "p5.voronoi provides a set of tools to draw and utilize voronoi diagrams in your p5.js sketches. Created by "
  using-a-library-title: "Using a library"
  using-a-library1: "A p5.js library can be any JavaScript code that extends or adds to the p5.js core functionality. There are two categories of libraries. Core libraries ("
  using-a-library2: " and "
  using-a-library3: ") are part of the p5.js distribution, while contributed libraries are developed, owned, and maintained by members of the p5.js community."
  using-a-library4: "To include a library in your sketch, link it into your HTML file, after you have linked in p5.js. An example HTML file might look like this:"
  create-your-own-title: "Create Your Own"
  create-your-own1: "p5.js welcomes libraries contributed by others! Check out the"
  create-your-own2: "libraries tutorial"
  create-your-own3: "for more specifics about how to create one."

community:
  community-title: "Community"
  community-statement-title: "p5.js Community Statement"
  community-statement1: "p5.js is a community interested in exploring the creation of art and design with technology."
  community-statement2: "We are a community of, and in solidarity with, people from every gender identity and expression, sexual orientation, race, ethnicity, language, neuro-type, size, ability, class, religion, culture, subculture, political opinion, age, skill level, occupation, and background. We acknowledge that not everyone has the time, financial means, or capacity to actively participate, but we recognize and encourage involvement of all kinds. We facilitate and foster access and empowerment. We are all learners."
  community-statement3: "We like these hashtags: #noCodeSnobs (because we value community over efficiency), #newKidLove (because we all started somewhere), #unassumeCore (because we don't assume knowledge), and #BlackLivesMatter (because of course)."
  in-practice-title: "In practice:"
  in-practice1: " We are not code snobs. We do not assume knowledge or imply there are things that somebody should know. "
  in-practice2: "We insist on actively engaging with requests for feedback regardless of their complexity."
  in-practice3: "We welcome newcomers and prioritize the education of others. We strive to approach all tasks with the enthusiasm of a newcomer. Because we believe that newcomers are just as valuable in this effort as experts."
  in-practice4: "We consistently make the effort to actively recognize and validate multiple types of contributions."
  in-practice5: "We are always willing to offer help or guidance."
  in-times-conflict-title: "In times of conflict:"
  in-times-conflict1: "We listen."
  in-times-conflict2: "We clearly communicate while acknowledging other's feelings."
  in-times-conflict3: "We admit when we're wrong, apologize, and accept responsibility for our actions."
  in-times-conflict4: "We are continuously seeking to improve ourselves and our community."
  in-times-conflict5: "We keep our community respectful and open."
  in-times-conflict6: "We make everyone feel heard."
  in-times-conflict7: "We are mindful and kind in our interactions."
  in-the-future-title: "In the future:"
  in-the-future1: "The future is now."
  contribute-title: "Contribute"
  contribute1: "Our community is always looking for enthusiasts to help in all different ways."
  develop-title: "Develop."
  develop1: "GitHub"
  develop2: " is the main place where code is collected, issues are documented, and discussions about code are had. Check out the "
  develop3: " development tutorial"
  develop4: " to get started, or "
  develop5: "create your own library."
  document-title: "Document."
  document1: " Everyone loves documentation. Help is needed "
  document2: "porting examples"
  document3: ", and"
  document4: " adding documentation"
  document5: ", and creating tutorials."
  teach-title: "Teach."
  teach1: " Teach a workshop, a class, a friend, a collaborator! Tag @p5xjs on Twitter and we will do our best to share what you're doing."
  create-title: "Create."
  create1: " p5.js is looking for designers, artists, coders, programmers to bring your creative and amazing work to show on the front page and inspire other people. Submit your work to "
  create2: "hello@p5js.org"
  create3: "."
  donate-title: "Donate."
  donate1: " p5.js is free and open source and made by artists. Help support the development of p5.js through a donation to the "
  donate2: "Processing Foundation"
  donate3: "."
  contributors-conference-title: "Contributors Conference"
  contributors-conference1: "In 2015, p5.js held its first-ever "
  contributors-conference2: "contributors conference"
  contributors-conference3: ". Artists, designers, developers, educators, and more joined forces at "
  contributors-conference4: "CMU's Studio for Creative Inquiry"
  contributors-conference5: " to make p5.js awesome."
  mailing-list-title: "Mailing list"
  mailing-list-1: "Enter your email address to receive occasional updates from the Processing Foundation."
  people-title: "People"
  people1: "blah"

books:
  books-title: "Books"

examples:
  Examples: "Examples"
  back-examples: "Back to Examples"
  Structure: "Structure"
  Form: "Form"
  Data: "Data"
  Arrays: "Arrays"
  Control: "Control"
  Image: "Image"
  Color: "Color"
  Math: "Math"
  Simulate: "Simulate"
  Interaction: "Interaction"
  Objects: "Objects"
  Lights: "Lights"
  Motion: "Motion"
  Instance_Mode: "Instance Mode"
  Dom: "DOM"
  Drawing: "Drawing"
  Transform: "Transform"
  Typography: "Typography"
  3D: "3D"
  Input: "Input"
  Advanced_Data: "Advanced Data"
  Sound: "Sound"
  Mobile: "Mobile"
  Hello_P5: "Hello p5"

contributors-conference:
  contributors-conference-title: "p5.js Contributors Conference"
  contributors-conference-date: "May 25-31"
  contributors-conference1: "A diverse group of approximately 30 participants gathered spent a week at the "
  contributors-conference2: ", advancing the code, documentation, and community outreach tools of the p5.js programming environment. Participants came from as far away as Hong Kong, Seattle, Los Angeles,Boston and New York. Most were working professionals in the fields of creative technology, interaction design, and new-media arts, but the group also included a half-dozen undergraduate and graduate students from Carnegie Mellon’s Schools of Art and Architecture."
  contributors-conference-participants-title: "Participants"
  contributors-conference-diversity-title: "Diversity"
  contributors-conference-diversity1: "Alongside technical development, one of the main focuses of this conference was outreach, community, and diversity. The conference began with a panel"
  contributors-conference-diversity2: "Diversity: Seven Voices on Race, Gender, Ability &amp; Class for FLOSS and the Internet"
  contributors-conference-diversity3: ". "
  contributors-conference-diversity4: "Organized by"
  contributors-conference-diversity5: "and"
  contributors-conference-diversity6: ", "
  contributors-conference-diversity7: "the panel took place Tuesday, 25 May 2015 in Kresge Auditorium at Carnegie Mellon University. Speakers included"
  contributors-conference-diversity8: "and"
  contributors-conference-diversity9: "."
  contributors-conference-support-title: "Support"
  contributors-conference-support1: "Our contributor conference took place at the"
  contributors-conference-support2: "at Carnegie Mellon University, an academic laboratory for atypical, anti-disciplinary, and inter-institutional research at the intersections of arts, science, technology, and culture."
  contributors-conference-support3: "This event was made possible by a grant from the"
  contributors-conference-support4: "and generous support from the"
  contributors-conference-support5: "and"
  contributors-conference-support6: "Thank you!"

reference:
  Reference: "Reference"
